CREATE DATABASE barangay_marigondon_overhaul_data;


-- Table: SITIO
CREATE TABLE SITIO (
    SITIO_ID SERIAL PRIMARY KEY,
    SITIO_NAME VARCHAR(100) NOT NULL
);

CREATE TABLE CLASSIFICATION_AGE(
    CLAG_ID SERIAL PRIMARY KEY,
    CLAG_CLASSIFICATION_NAME VARCHAR(50) NOT NULL
);

CREATE TABLE CLASSIFICATION_HEALTH_RISK(
    CLAH_ID SERIAL PRIMARY KEY,
    CLAH_CLASSIFICATION_NAME VARCHAR(50) NOT NULL
);
-- Table: CLASSIFICATION (Age/Risk)
CREATE TABLE CLASSIFICATION (
    CLA_ID SERIAL PRIMARY KEY,
    CLAG_ID INT REFERENCES CLASSIFICATION_AGE(CLAG_ID),
    CLAH_ID INT REFERENCES CLASSIFICATION_HEALTH_RISK(CLAH_ID)
);

-- Table: ETHNICITY
CREATE TABLE ETHNICITY (
    ETH_ID SERIAL PRIMARY KEY,
    ETH_TRIBE_NAME VARCHAR(100) NOT NULL
);

-- Table: RELIGION
CREATE TABLE RELIGION (
    REL_ID SERIAL PRIMARY KEY,
    REL_NAME VARCHAR(100) NOT NULL
);

-- Table: SOCIO_ECONOMIC_STATUS
CREATE TABLE SOCIO_ECONOMIC_STATUS (
    SOEC_ID SERIAL PRIMARY KEY,
    SOEC_STATUS VARCHAR(100) NOT NULL CHECK (
        SOEC_STATUS IN ('NHTS', 'Non-NHTS', 'Other')
        ),
    SOEC_NUMBER VARCHAR(50),
    CONSTRAINT chk_socio_status CHECK (
        (SOEC_STATUS IN ('NHTS 4Ps', 'NHTS Non-4Ps') AND SOEC_NUMBER IS NOT NULL) OR
        (SOEC_STATUS = 'Non-NHTS' AND SOEC_NUMBER IS NULL)
        )
);

CREATE TYPE blood_type_enum AS ENUM(
    'A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'
    );
CREATE TYPE civil_status_type AS ENUM(
    'Single', 'Married', 'Widowed', 'Separated'
    );














-- Table: CITIZEN
CREATE TABLE CITIZEN (
    CTZ_ID SERIAL PRIMARY KEY,
    CTZ_FIRST_NAME VARCHAR(100) NOT NULL,
    CTZ_MIDDLE_NAME VARCHAR(100),
    CTZ_LAST_NAME VARCHAR(100) NOT NULL,
    CTZ_SUFFIX VARCHAR(10),
    CTZ_DATE_OF_BIRTH DATE NOT NULL,
    CTZ_SEX CHAR(1) NOT NULL CHECK(
            CTZ_SEX IN ('M', 'F')
        ),
    CTZ_CIVIL_STATUS civil_status_type NOT NULL,
    CTZ_BLOOD_TYPE blood_type_enum,
    CTZ_IS_ALIVE BOOLEAN DEFAULT TRUE,
    CTZ_IS_REGISTERED_VOTER BOOLEAN DEFAULT FALSE,
    CTZ_IS_IP BOOLEAN DEFAULT FALSE,
    CTZ_PLACE_OF_BIRTH TEXT NOT NULL,
    CTZ_DATE_REGISTERED DATE DEFAULT CURRENT_DATE,
    CTZ_DATE_UPDATED DATE NOT NULL,
    SOEC_ID INT NOT NULL REFERENCES SOCIO_ECONOMIC_STATUS(SOEC_ID),
    REL_ID INT REFERENCES RELIGION(REL_ID),
    ETH_ID INT REFERENCES ETHNICITY(ETH_ID),
    CLA_ID INT NOT NULL REFERENCES CLASSIFICATION(CLA_ID),
    SITIO_ID INT NOT NULL REFERENCES SITIO(SITIO_ID),
    CONSTRAINT chk_ethnicity CHECK(
        (CTZ_IS_IP = TRUE AND ETH_ID IS NOT NULL) OR
        (CTZ_IS_IP = FALSE AND ETH_ID IS NULL)
        )
);

-- Table: CONTACT
CREATE TABLE CONTACT (
    CON_ID SERIAL PRIMARY KEY,
    CON_PHONE VARCHAR(20) UNIQUE NOT NULL,
    CON_EMAIL VARCHAR(100) UNIQUE NOT NULL,
    CTZ_ID INT NOT NULL REFERENCES CITIZEN(CTZ_ID)
);

-- Table: INFRASTRUCTURE_TYPE
CREATE TABLE INFRASTRUCTURE_TYPE (
    INFT_ID SERIAL PRIMARY KEY,
    INFT_TYPE_NAME VARCHAR(100) NOT NULL
);

-- Table: INFRASTRUCTURE_OWNER
CREATE TABLE INFRASTRUCTURE_OWNER (
    INFO_ID SERIAL PRIMARY KEY,
    INFO_LAST_NAME VARCHAR(100) NOT NULL,
    INFO_FIRST_NAME VARCHAR(100) NOT NULL,
    INFO_MIDDLE_NAME VARCHAR(100),
    CTZ_ID INT REFERENCES CITIZEN(CTZ_ID)
);

-- Table: INFRASTRUCTURE
CREATE TABLE INFRASTRUCTURE (
    INF_ID SERIAL PRIMARY KEY,
    INF_NAME VARCHAR(100) NOT NULL,
    INF_IS_PUBLIC BOOLEAN NOT NULL,
    INF_DESCRIPTION TEXT,
    INF_ADDRESS TEXT,
    INFT_ID INT REFERENCES INFRASTRUCTURE_TYPE(INFT_ID),
    INFO_ID INT REFERENCES INFRASTRUCTURE_OWNER(INFO_ID),
    SITIO_ID INT REFERENCES SITIO(SITIO_ID),
    CONSTRAINT chk_public CHECK(
        (INF_IS_PUBLIC = TRUE AND INFO_ID IS NULL) OR
        (INF_IS_PUBLIC = FALSE AND INFO_ID IS NOT NULL)
    )
);

-- Table: WATER_SOURCE
CREATE TABLE WATER_SOURCE(
    WATER_ID SERIAL PRIMARY KEY,
    WATER_SOURCE_NAME VARCHAR(50) NOT NULL
);

-- Table: WATER_SOURCE
CREATE TABLE TOILET_TYPE(
    TOIL_ID SERIAL PRIMARY KEY,
    TOIL_TYPE_NAME VARCHAR(50) NOT NULL
);

-- Table: RELATIONSHIP_TYPE
CREATE TABLE RELATIONSHIP_TYPE (
    RELA_ID SERIAL PRIMARY KEY,
    RELA_RELATIONSHIP_NAME VARCHAR(100)
);

-- Table: HOUSEHOLD_INFO
CREATE TABLE HOUSEHOLD_INFO (
    HH_ID SERIAL PRIMARY KEY,
    HH_HOUSE_NUMBER VARCHAR(50) UNIQUE NOT NULL,
    HH_ADDRESS TEXT,
    HH_OWNERSHIP_STATUS VARCHAR(50),
    HH_HOME_IMAGE TEXT NOT NULL,
    HH_HOME_LINK TEXT NOT NULL,
    WATER_ID INT NOT NULL REFERENCES  WATER_SOURCE(WATER_ID),
    TOILET_TYPE INT NOT NULL REFERENCES TOILET_TYPE(TOIL_ID),
    SITIO_ID INT NOT NULL REFERENCES SITIO(SITIO_ID),
    CONSTRAINT chk_valid_home_link CHECK(
        HH_HOME_LINK ~ 'https?://[^\s/$.?#].[^\s]*$]' AND
        length(HH_HOME_LINK) <= 1024 AND
        HH_HOME_LINK !~ '[<>''"\s]'
        )
);

-- Table: HOUSEHOLD_MEMBER
CREATE TABLE HOUSEHOLD_MEMBER (
    HM_ID SERIAL PRIMARY KEY,
    HM_REMARKS TEXT,
    HH_ID INT NOT NULL REFERENCES HOUSEHOLD_INFO(HH_ID),
    CTZ_ID INT NOT NULL REFERENCES CITIZEN(CTZ_ID),
    RELA_ID INT NOT NULL REFERENCES RELATIONSHIP_TYPE(RELA_ID)
);

-- Table: FAMILY_PLANNING_METHOD
CREATE TABLE FAMILY_PLANNING_METHOD (
    FPM_ID SERIAL PRIMARY KEY,
    FPM_METHOD VARCHAR(100)
);

-- Table: FPM_STATUS
CREATE TABLE FPM_STATUS (
    FPMS_ID SERIAL PRIMARY KEY,
    FPMS_STATUS_NAME VARCHAR(100)
);

-- Table: FAMILY_PLANNING
CREATE TABLE FAMILY_PLANNING (
    FP_ID SERIAL PRIMARY KEY,
    FP_START_DATE DATE,
    FP_END_DATE DATE,
    CTZ_ID INT REFERENCES CITIZEN(CTZ_ID),
    FPMS_STATUS INT NOT NULL REFERENCES FPM_STATUS(FPMS_ID),
    FPM_METHOD INT NOT NULL REFERENCES FAMILY_PLANNING_METHOD(FPM_ID)
);

-- Table: EDUCATIONAL_ATTAINMENT
CREATE TABLE EDUCATIONAL_ATTAINMENT (
    EDAT_ID SERIAL PRIMARY KEY,
    EDAT_LEVEL VARCHAR(100)
);

-- Table: EDUCATION_STATUS
CREATE TABLE EDUCATION_STATUS (
    EDU_ID SERIAL PRIMARY KEY,
    EDU_IS_CURRENTLY_STUDENT BOOLEAN,
    EDU_INSTITUTION_NAME VARCHAR(255),
    EDAT_ID INT REFERENCES EDUCATIONAL_ATTAINMENT(EDAT_ID),
--     CTZ_ID INT NOT NULL REFERENCES CITIZEN(CTZ_ID),
    CONSTRAINT chk_is_student CHECK(
        (EDU_IS_CURRENTLY_STUDENT = TRUE AND EDAT_ID IS NULL) OR
        (EDU_IS_CURRENTLY_STUDENT = FALSE AND EDAT_ID IS NOT NULL)
        )
);

CREATE TABLE BUSINESS_TYPE (
    BST_ID SERIAL PRIMARY KEY,
    BST_TYPE_NAME VARCHAR(25) NOT NULL
);

CREATE TABLE BUSINESS_OWNER(
    BSO_ID SERIAL PRIMARY KEY,
    BSO_FNAME VARCHAR(30) NOT NULL,
    BSO_LNAME VARCHAR(30) NOT NULL
);

-- Table: BUSINESS_ADDRESS
-- CREATE TABLE BUSINESS_ADDRESS (
--     BA_ID SERIAL PRIMARY KEY,
--     BA_POSTAL_CODE VARCHAR(20),
--     BA_PROVINCE VARCHAR(100),
--     BA_MUNICIPALITY VARCHAR(100),
--     BA_BARANGAY VARCHAR(100),
--     BA_SITIO_PUROK VARCHAR(100),
--     BA_STREET VARCHAR(255)
-- );

CREATE TYPE business_status_enum AS ENUM(
    'ACTIVE',
    'INACTIVE',
    'CLOSED',
    'SUSPENDED'
);

-- First, create the ENUM type
CREATE TYPE business_status_enum AS ENUM ('Active', 'Inactive', 'Closed');

-- Then create the table with the ENUM column
CREATE TABLE BUSINESS_INFO (
    BS_ID SERIAL PRIMARY KEY,
    BS_NAME VARCHAR(100) NOT NULL,
    BS_DESCRIPTION TEXT NOT NULL,
    BS_STATUS business_status_enum NOT NULL,
    BS_IS_DTI BOOLEAN,
    BS_DTI_IMAGE TEXT,
    BS_ADDRESS VARCHAR(50) NOT NULL,
    BST_ID INT NOT NULL REFERENCES BUSINESS_TYPE(BST_ID),
    SITIO_ID INT NOT NULL REFERENCES SITIO(SITIO_ID)
--     BA_ID INT NOT NULL REFERENCES BUSINESS_ADDRESS(BA_ID),
--     CTZ_ID INT NOT NULL REFERENCES CITIZEN(CTZ_ID)

);

-- Table: EMPLOYMENT_STATUS
CREATE TABLE EMPLOYMENT_STATUS (
    ES_ID SERIAL PRIMARY KEY,
    ES_STATUS_NAME VARCHAR(100)
);

-- Table: GOVERNMENT_WORKER
CREATE TABLE GOVERNMENT_WORKER (
    GOVW_ID SERIAL PRIMARY KEY,
    GOVW_JOB_TITLE VARCHAR(100)
);

-- Table: EMPLOYMENT
CREATE TABLE EMPLOYMENT (
    EMP_ID SERIAL PRIMARY KEY,
    EMP_OCCUPATION VARCHAR(100) NOT NULL,
    EMP_IS_GOV_WORKER BOOLEAN DEFAULT FALSE,
    ES_ID INT REFERENCES EMPLOYMENT_STATUS(ES_ID),
    GOVW_ID INT REFERENCES GOVERNMENT_WORKER(GOVW_ID),
    CTZ_ID INT NOT NULL REFERENCES CITIZEN(CTZ_ID),
    CONSTRAINT chk_is_gov_worker CHECK (
        (EMP_IS_GOV_WORKER = TRUE AND GOVW_ID IS NOT NULL) OR
        (EMP_IS_GOV_WORKER = FALSE AND GOVW_ID IS NULL)
        )
);

-- Table: TRANSACTION_TYPE
CREATE TABLE TRANSACTION_TYPE (
    TT_ID SERIAL PRIMARY KEY,
    TT_TYPE_NAME VARCHAR(100)
);

CREATE TYPE transaction_status_enum AS ENUM(
    'Pending',
    'Approved',
    'Rejected'
);


CREATE TABLE TRANSACTION_LOG (
    TL_ID SERIAL PRIMARY KEY,
    TL_DATE_REQUESTED DATE DEFAULT CURRENT_DATE,
    TL_PURPOSE VARCHAR(150) NOT NULL,
    TL_STATUS transaction_status_enum,
    TL_FNAME VARCHAR(30) NOT NULL,
    TL_LNAME VARCHAR(30) NOT NULL,
    TT_ID INT NOT NULL REFERENCES TRANSACTION_TYPE(TT_ID)
);

-- Table: TRANSACTION_LOG
-- CREATE TABLE TRANSACTION_LOG (
--     TL_ID SERIAL PRIMARY KEY,
--     TL_DATE_REQUESTED DATE DEFAULT CURRENT_DATE,
--     TL_PURPOSE VARCHAR(150) NOT NULL,
--     TL_STATUS transaction_status_enum,
--     TT_ID INT NOT NULL REFERENCES TRANSACTION_TYPE(TT_ID),
--     CTZ_ID INT NOT NULL REFERENCES CITIZEN(CTZ_ID)
-- );

-- Table: BARANGAY_EMPLOYEE
CREATE TABLE BARANGAY_EMPLOYEE (
    BE_ID SERIAL PRIMARY KEY,
    BE_POSITION VARCHAR(100) NOT NULL,
    BE_START_DATE DATE NOT NULL,
    BE_END_DATE DATE,
    CTZ_ID INT NOT NULL REFERENCES CITIZEN(CTZ_ID)
);

-- Table: CITIZEN_INTERVIEW
CREATE TABLE CITIZEN_INTERVIEW (
    CIN_ID SERIAL PRIMARY KEY,
    CIN_DATE_INTERVIEWED DATE,
    CIN_DATE_REVIEWED DATE,
    BE_INTERVIEWER_ID INT NOT NULL REFERENCES BARANGAY_EMPLOYEE(BE_ID),
    BE_REVIEWER_ID INT REFERENCES BARANGAY_EMPLOYEE(BE_ID),
    CTZ_ID INT NOT NULL REFERENCES CITIZEN(CTZ_ID)
);

-- Table: SYSTEM_ACCOUNT

CREATE TABLE SYSTEM_ACCOUNT (
    SYS_ID SERIAL PRIMARY KEY,
    SYS_PIN VARCHAR(6) NOT NULL,
    SYS_PASSWORD VARCHAR(255) NOT NULL,
    SYS_IS_ADMIN BOOLEAN DEFAULT FALSE,
    SYS_IS_ACTIVE BOOLEAN NOT NULL,
    SYS_LAST_LOGIN TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    SYS_DATE_CREATED DATE DEFAULT CURRENT_DATE,
    BE_ID INT NOT NULL REFERENCES BARANGAY_EMPLOYEE(BE_ID)
);

CREATE TYPE action_type_enum AS ENUM (
    'INSERT',
    'UPDATE',
    'DELETE',
    'LOGIN',
    'LOGOUT'
);

-- Table: SYSTEM_ACTIVITY_LOG
CREATE TABLE SYSTEM_ACTIVITY_LOG (
    ACT_ID SERIAL PRIMARY KEY,
    ACT_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ACT_ACTION_TYPE action_type_enum,
    ACT_TABLE_NAME VARCHAR(50) NOT NULL,
    ACT_ENTITY_ID INT,
    ACT_DESCRIPTION TEXT,
    SYS_ID INT NOT NULL REFERENCES SYSTEM_ACCOUNT(SYS_ID)

);

-- Table: MEDICAL_HISTORY_TYPE
CREATE TABLE MEDICAL_HISTORY_TYPE(
    MHT_ID SERIAL PRIMARY KEY,
    MHT_TYPE_NAME VARCHAR(50) NOT NULL
);

-- Table: MEDICAL_HISTORY
CREATE TABLE MEDICAL_HISTORY (
    MH_ID SERIAL PRIMARY KEY,
    MH_DATE_DIAGNOSED DATE,
    MHT_ID INT NOT NULL REFERENCES MEDICAL_HISTORY_TYPE(MHT_ID),
    CTZ_ID INT NOT NULL REFERENCES CITIZEN(CTZ_ID)
);

-- Table: PHILHEALTH_CATEGORY
CREATE TABLE PHILHEALTH_CATEGORY (
    PC_ID SERIAL PRIMARY KEY,
    PC_CATEGORY_NAME VARCHAR(100) NOT NULL
);

-- Table: PHILHEALTH
CREATE TABLE PHILHEALTH (
    PHEA_ID SERIAL PRIMARY KEY,
    PHEA_ID_NUMBER VARCHAR(50) UNIQUE NOT NULL,
    PHEA_MEMBERSHIP_TYPE VARCHAR(50) CHECK(
        PHEA_MEMBERSHIP_TYPE IN (
            'Member',
            'Dependent'
            )
        ),
    PC_ID INT NOT NULL REFERENCES PHILHEALTH_CATEGORY(PC_ID),
    CTZ_ID INT NOT NULL REFERENCES CITIZEN(CTZ_ID)
);

-- Table: HISTORY_TYPE
CREATE TABLE HISTORY_TYPE (
    HIST_ID SERIAL PRIMARY KEY,
    HIST_TYPE_NAME VARCHAR(100) NOT NULL
);

-- Table: CITIZEN_HISTORY
CREATE TABLE CITIZEN_HISTORY (
    CIHI_ID SERIAL PRIMARY KEY,
    CIHI_DESCRIPTION VARCHAR(100) NOT NULL,
    CIHI_DATE_RECORDED DATE DEFAULT CURRENT_DATE,
    HIST_ID INT NOT NULL REFERENCES HISTORY_TYPE(HIST_ID),
    CTZ_ID INT NOT NULL REFERENCES CITIZEN(CTZ_ID)
);

-- Table: SETTLEMENT_LOG
CREATE TABLE SETTLEMENT_LOG(
    SETT_ID SERIAL PRIMARY KEY,
    SETT_COMPLAINT_DESCRIPTION TEXT NOT NULL,
    SETT_SETTLEMENT_DESCRIPTION TEXT NOT NULL,
    SETT_DATE_RECORDED DATE DEFAULT CURRENT_DATE,
    CIHI_ID INT NOT NULL REFERENCES CITIZEN_HISTORY(CIHI_ID)
);

-- Table: PARTICIPANT
CREATE TABLE PARTICIPANT(
    PART_ID SERIAL PRIMARY KEY,
    PART_ROLE_TYPE VARCHAR(50) NOT NULL CHECK (
        PART_ROLE_TYPE IN (
            'Complainant',
            'Complainee'
            )
        ),
    PART_IS_CITIZEN BOOLEAN NOT NULL,
    PART_CUSTOM_NAME VARCHAR(100),
    SETT_ID INT NOT NULL REFERENCES SETTLEMENT_LOG(SETT_ID),
    CTZ_ID INT REFERENCES CITIZEN(CTZ_ID),
    CONSTRAINT chk_is_ctizen CHECK(
        (PART_IS_CITIZEN = TRUE AND PART_CUSTOM_NAME IS NULL AND CTZ_ID IS NOT NULL) OR
        (PART_IS_CITIZEN = FALSE AND PART_CUSTOM_NAME IS NOT NULL AND CTZ_ID IS NULL)
        )
);


-- TRIGGER FUNCTIONS ETC

CREATE OR REPLACE FUNCTION is_reproductive_age_female(dob DATE, sex CHAR(1))
    RETURNS BOOLEAN AS $$
BEGIN
    RETURN sex = 'F' AND
           EXTRACT(YEAR FROM AGE(dob)) BETWEEN 15 AND 49;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION check_reproductive_age_trigger()
    RETURNS TRIGGER AS $$
DECLARE
    dob DATE;
    sex CHAR(1);
BEGIN
    SELECT CTZ_DATE_OF_BIRTH, CTZ_SEX INTO dob, sex
    FROM CITIZEN WHERE CTZ_ID = NEW.CTZ_ID;

    IF NOT is_reproductive_age_female(dob, sex) THEN
        RAISE EXCEPTION 'Citizen is not a female of reproductive age (15-49).';
    END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_check_is_reproductive_age
    BEFORE INSERT OR UPDATE ON FAMILY_PLANNING
    FOR EACH ROW
EXECUTE FUNCTION check_reproductive_age_trigger();



CREATE OR REPLACE FUNCTION log_entity_activity()
    RETURNS TRIGGER AS $$
DECLARE
    v_entity_id INT;
BEGIN

    IF TG_OP = 'INSERT' THEN
        v_entity_id := NEW.CTZ_ID;
    ELSIF TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN
        v_entity_id := OLD.CTZ_ID;
    END IF;

    INSERT INTO SYSTEM_ACTIVITY_LOG (
        ACT_ACTION_TYPE,
        ACT_TABLE_NAME,
        ACT_ENTITY_ID,
        SYS_ID,
        ACT_DESCRIPTION
    )
    VALUES (
               TG_OP,
               TG_TABLE_NAME,
               v_entity_id,
               current_setting('app.current_user_id')::INT,
               CONCAT('Action ', TG_OP, ' on ', TG_TABLE_NAME, ' ID = ', v_entity_id)
           );

    RETURN CASE
               WHEN TG_OP = 'DELETE' THEN OLD
               ELSE NEW
        END;
END;
$$ LANGUAGE plpgsql;

-- CITIZEN
CREATE TRIGGER trg_log_citizen
    AFTER INSERT OR UPDATE OR DELETE ON CITIZEN
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- FAMILY_PLANNING
CREATE TRIGGER trg_log_family_planning
    AFTER INSERT OR UPDATE OR DELETE ON FAMILY_PLANNING
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- FAMILY_PLANNING_METHOD
CREATE TRIGGER trg_log_fp_method
    AFTER INSERT OR UPDATE OR DELETE ON FAMILY_PLANNING_METHOD
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- FPM_STATUS
CREATE TRIGGER trg_log_fpm_status
    AFTER INSERT OR UPDATE OR DELETE ON FPM_STATUS
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- SOCIO_ECONOMIC_STATUS
CREATE TRIGGER trg_log_socio_economic_status
    AFTER INSERT OR UPDATE OR DELETE ON SOCIO_ECONOMIC_STATUS
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- SETTLEMENT_LOG
CREATE TRIGGER trg_log_settlement
    AFTER INSERT OR UPDATE OR DELETE ON SETTLEMENT_LOG
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- PARTICIPANT
CREATE TRIGGER trg_log_participant
    AFTER INSERT OR UPDATE OR DELETE ON PARTICIPANT
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- EMPLOYMENT
CREATE TRIGGER trg_log_employment
    AFTER INSERT OR UPDATE OR DELETE ON EMPLOYMENT
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- EDUCATION_STATUS
CREATE TRIGGER trg_log_education_status
    AFTER INSERT OR UPDATE OR DELETE ON EDUCATION_STATUS
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- HOUSEHOLD_INFO
CREATE TRIGGER trg_log_household_info
    AFTER INSERT OR UPDATE OR DELETE ON HOUSEHOLD_INFO
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- WATER_SOURCE
CREATE TRIGGER trg_log_water_source
    AFTER INSERT OR UPDATE OR DELETE ON WATER_SOURCE
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- TOILET_TYPE
CREATE TRIGGER trg_log_tolet_type
    AFTER INSERT OR UPDATE OR DELETE ON TOILET_TYPE
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- ETHNICITY
CREATE TRIGGER trg_log_ethnicity
    AFTER INSERT OR UPDATE OR DELETE ON ETHNICITY
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- HOUSEHOLD_MEMBER
CREATE TRIGGER trg_log_household_member
    AFTER INSERT OR UPDATE OR DELETE ON HOUSEHOLD_MEMBER
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- RELATIONSHIP_TYPE
CREATE TRIGGER trg_log_relationship_type
    AFTER INSERT OR UPDATE OR DELETE ON RELATIONSHIP_TYPE
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- INFRASTRUCTURE
CREATE TRIGGER trg_log_infrastructure
    AFTER INSERT OR UPDATE OR DELETE ON INFRASTRUCTURE
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- INFRASTRUCTURE_OWNER
CREATE TRIGGER trg_log_infrastructure_owner
    AFTER INSERT OR UPDATE OR DELETE ON INFRASTRUCTURE_OWNER
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- INFRASTRUCTURE_TYPE
CREATE TRIGGER trg_log_infrastructure_type
    AFTER INSERT OR UPDATE OR DELETE ON INFRASTRUCTURE_TYPE
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- SITIO
CREATE TRIGGER trg_log_sitio
    AFTER INSERT OR UPDATE OR DELETE ON SITIO
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- CITIZEN_HISTORY
CREATE TRIGGER trg_log_citizen_history
    AFTER INSERT OR UPDATE OR DELETE ON CITIZEN_HISTORY
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- BUSINESS_INFO
CREATE TRIGGER trg_log_business_info
    AFTER INSERT OR UPDATE OR DELETE ON BUSINESS_INFO
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- BUSINESS_ADDRESS
CREATE TRIGGER trg_log_business_address
    AFTER INSERT OR UPDATE OR DELETE ON BUSINESS_ADDRESS
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- MEDICAL_HISTORY
CREATE TRIGGER trg_log_medical_history
    AFTER INSERT OR UPDATE OR DELETE ON MEDICAL_HISTORY
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- MEDICAL_HISTORY_TYPE
CREATE TRIGGER trg_log_medical_history_type
    AFTER INSERT OR UPDATE OR DELETE ON MEDICAL_HISTORY_TYPE
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- BARANGAY_EMPLOYEE
CREATE TRIGGER trg_log_barangay_employee
    AFTER INSERT OR UPDATE OR DELETE ON BARANGAY_EMPLOYEE
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- CITIZEN_INTERVIEW
CREATE TRIGGER trg_log_citizen_interview
    AFTER INSERT OR UPDATE OR DELETE ON CITIZEN_INTERVIEW
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- SYSTEM_ACCOUNT
CREATE TRIGGER trg_log_system_account
    AFTER INSERT OR UPDATE OR DELETE ON SYSTEM_ACCOUNT
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- TRANSACTION_LOG
CREATE TRIGGER trg_log_transaction
    AFTER INSERT OR UPDATE OR DELETE ON TRANSACTION_LOG
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- TRANSACTION_TYPE
CREATE TRIGGER trg_log_transaction_type
    AFTER INSERT OR UPDATE OR DELETE ON TRANSACTION_TYPE
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- RELIGION
CREATE TRIGGER trg_log_religion
    AFTER INSERT OR UPDATE OR DELETE ON RELIGION
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- PHILHEALTH
CREATE TRIGGER trg_log_philhealth
    AFTER INSERT OR UPDATE OR DELETE ON PHILHEALTH
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- PHILHEALTH_CATEGORY
CREATE TRIGGER trg_log_philhealth_category
    AFTER INSERT OR UPDATE OR DELETE ON PHILHEALTH_CATEGORY
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- CONTACT
CREATE TRIGGER trg_log_contact
    AFTER INSERT OR UPDATE OR DELETE ON CONTACT
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- CLASSIFICATION
CREATE TRIGGER trg_log_classification
    AFTER INSERT OR UPDATE OR DELETE ON CLASSIFICATION
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- CLASSIFICATION_AGE
CREATE TRIGGER trg_log_classification_age
    AFTER INSERT OR UPDATE OR DELETE ON CLASSIFICATION_AGE
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();

-- CLASSIFICATION_HEALTH_RISK
CREATE TRIGGER trg_log_classification_health_risk
    AFTER INSERT OR UPDATE OR DELETE ON CLASSIFICATION_HEALTH_RISK
    FOR EACH ROW
EXECUTE FUNCTION log_entity_activity();
